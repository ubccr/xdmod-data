# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: xdmod-data
on:
  push:
    branches:
    - "main"
    - "v1.x.y"
  pull_request:
    branches:
    - "main"
    - "v1.x.y"
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
        - "3.12"
        - "3.11"
        - "3.10"
        - "3.9"
        - "3.8"
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 flake8-commas flake8-quotes pytest pandas
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        python -m pip install -e .
    - name: Lint with flake8
      run: |
        # stop the build if there are linter errors
        flake8 . --max-complexity=10 --show-source --exclude __init__.py
    - name: Spin up containers for testing XDMoD webservers
      uses: hoverkraft-tech/compose-action@v2.0.1
      with: 
        compose-file: .github/workflows/docker-compose.yaml
    - name: Install yq 
      run: |
        sudo add-apt-repository ppa:rmescandon/yq
        sudo apt update
        sudo apt install yq -y
    - name: Test against each supported XDMoD portal version
      run: |
        declare -a portal_versions=$(yq '.services | keys[]' .github/workflows/docker-compose.yaml)
        for version in portal_versions; do
          docker exec $version /root/bin/services start
          port_version=$(yq ".services.$version.ports")
          port=${port_version:0:4}
          token=$(curl -X POST -c xdmod.cookie -d "username=normaluser&password=normaluser" https://localhost:$port/rest/auth/login -k | jq -r '.results.token')
          curl -b xdmod.cookie https://localhost:port/rest/users/current/api/token?token=$token -k -X POST | jq -r '.data.token' > ~/.xdmod-data-token
          coverage erase
          coverage run --branch --append -m pytest -vvs -o log_cli=true tests/
        done
        coverage report -m --fail-under=100