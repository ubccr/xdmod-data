# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: xdmod-data
on:
  push:
    branches:
    - "main"
    - "v1.x.y"
  pull_request:
    branches:
    - "main"
    - "v1.x.y"
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
        - "3.12"
        - "3.11"
        - "3.10"
        - "3.9"
        - "3.8"
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 flake8-commas flake8-quotes pandas python-dotenv pytest coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        python -m pip install -e .
    - name: Lint with flake8
      run: |
        # stop the build if there are linter errors
        flake8 . --max-complexity=10 --show-source --exclude __init__.py
    - name: Spin up containers for testing XDMoD webservers
      uses: hoverkraft-tech/compose-action@v2.0.1
      with: 
        compose-file: .github/workflows/docker-compose.yaml
    - name: Install yq 
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
    - name: Test against each supported XDMoD portal version
      run: |
        # Create a file with 10,000 users so that we can test filters that have more than 10,000 values
        for i in {1..10000}; do
          unix=$((1704085200+$i))
          echo "$i|2269212|frearson|black|banana-cream|caste|caste|45580|user$i|379330|$(date +'%Y-%m-%dT%H:%M:%S' -d @$unix)|$(date +'%Y-%m-%dT%H:%M:%S' -d @$(($unix+1)))|$(date +'%Y-%m-%dT%H:%M:%S' -d @$(($unix+2)))|$(date +'%Y-%m-%dT%H:%M:%S' -d @$(($unix+3)))|2-23:24:40|0:0|COMPLETED|1|16|16|62.50Gn|cpu=16,mem=62.50G,node=1|billing=16,cpu=16,mem=62.50G,node=1|3-00:00:00|cpn-m25-02-01|310f6011b278ebb15df2d199e0119de78d261d8c478a203abc97dc3dda7702ae" >> 10000users.log
        done
        #run tests
        coverage erase
        declare -a portal_versions=$(yq '.services | keys[]' .github/workflows/docker-compose.yaml)
        for version in $portal_versions; do
          # Generate OpenSSL Key
          docker exec $version sh -c 'openssl genrsa -rand /proc/cpuinfo:/proc/filesystems:/proc/interrupts:/proc/ioports:/proc/uptime 2048 > /etc/pki/tls/private/localhost.key'
          # Generate Certificate 
          docker exec $version /usr/bin/openssl req -new -key /etc/pki/tls/private/localhost.key -x509 -sha256 -days 365 -set_serial $RANDOM -extensions v3_req -out /etc/pki/tls/certs/localhost.crt -subj "/C=XX/L=Default City/O=Default Company Ltd/CN=localhost" -addext 'subjectAltName=DNS:localhost'
          # Copy Certificate from container
          docker cp $version:/etc/pki/tls/certs/localhost.crt $version.crt 
          # Prepare to use certificate for curl and python requests
          export CURL_CA_BUNDLE="$version.crt"
          # Start up web server in container
          docker exec $version /root/bin/services start
          ports=$(yq ".services.\"$version\".ports[0]" .github/workflows/docker-compose.yaml)
          port=$(echo $ports | cut -d ':' -f 1)
          export XDMOD_HOST="https://localhost:$port"
          token=$(curl -X POST -c xdmod.cookie -d "username=normaluser&password=normaluser" $XDMOD_HOST/rest/auth/login | jq -r '.results.token')
          echo -n 'XDMOD_API_TOKEN=' > ~/.xdmod-data-token
          curl -X POST -b xdmod.cookie $XDMOD_HOST/rest/users/current/api/token?token=$token | jq -r '.data.token' >> ~/.xdmod-data-token
          docker cp 10000users.log $version:10000users.log
          docker exec $version xdmod-shredder -r frearson -f slurm -i 10000users.log
          date=$(date +%Y-%m-%d)
          docker exec $version xdmod-ingestor --ingest
          docker exec $version xdmod-ingestor --aggregate=job --last-modified-start-date $date
          coverage run --branch --append -m pytest -vvs -o log_cli=true tests/
        done
        coverage report -m --fail-under=100