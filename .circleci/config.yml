version: 2.1
jobs:
  build:
    parameters:
      python-version:
        type: string
    environment:
      XDMOD_10_5_IMAGE: tools-ext-01.ccr.xdmod.org/xdmod-10.5.0-x86_64:rockylinux8.5-0.3
      XDMOD_11_0_IMAGE: tools-ext-01.ccr.xdmod.org/xdmod:x86_64-rockylinux8.9.20231119-v11.0.0-1.0-03
    docker:
      - image: cimg/python:<< parameters.python-version >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            python -m pip install --upgrade pip
            python -m pip install flake8 flake8-commas flake8-quotes pytest coverage
            python -m pip install -e .
      - run:
          name: Lint with Flake8
          command: python3 -m flake8 . --max-complexity=10 --show-source --exclude __init__.py
      - setup_remote_docker
      - run:
          name: Spin up containers for testing against different XDMoD web server versions
          command: docker compose -f .circleci/docker-compose.yml up -d
      - run:
          name: Test against each XDMoD web server version
          command: |
            declare -a portal_versions=$(yq '.services | keys | .[]' .circleci/docker-compose.yml)
            for version in $portal_versions; do
              if [ "$version" = 'xdmod-main-dev' ]; then
                # Install and run the latest development version of the XDMoD web server.
                docker exec $version bash -c 'git clone --depth=1 https://github.com/ubccr/xdmod.git /root/xdmod'
                docker exec -w /root/xdmod $version bash -c 'composer install'
                docker exec -w /root/xdmod $version bash -c '/root/bin/buildrpm xdmod'
                docker exec -w /root/xdmod $version bash -c 'XDMOD_TEST_MODE=upgrade ./tests/ci/bootstrap.sh'
                docker exec -w /root/xdmod $version bash -c './tests/ci/validate.sh'
              else
                # Run the XDMoD web server.
                docker exec $version /root/bin/services start
              fi
              # Copy certificate from container.
              docker cp $version:/etc/pki/tls/certs/localhost.crt $version.crt
              export CURL_CA_BUNDLE="$version.crt"
              # Set XDMoD host.
              ports=$(yq ".services.\"$version\".ports[0]" .circleci/docker-compose.yml)
              port=$(echo $ports | cut -d ':' -f 1)
              export XDMOD_HOST="https://localhost:$port"
              # Set XDMoD API token.
              token=$(curl \
                -X POST \
                -c xdmod.cookie \
                -d 'username=normaluser&password=normaluser' \
                $XDMOD_HOST/rest/auth/login \
                | jq -r '.results.token' \
              )
              echo -n 'XDMOD_API_TOKEN=' > ~/.xdmod-data-token
              curl \
                -X POST \
                -b xdmod.cookie \
                $XDMOD_HOST/rest/users/current/api/token?token=$token \
                | jq -r '.data.token' \
                >> ~/.xdmod-data-token
              # Copy the 10,000 users file into the container and shred it.
              # We use this file so we can test filters with more than 10,000
              # values and date ranges that span multiple quarters.
              docker cp 10000users.log $version:10000users.log
              docker exec $version xdmod-shredder -r frearson -f slurm -i 10000users.log
              # Ingest and aggregate.
              date=$(date --utc +%Y-%m-%d)
              docker exec $version xdmod-ingestor --ingest
              docker exec $version xdmod-ingestor --aggregate=job --last-modified-start-date $date
              # Run tests.
              export XDMOD_VERSION="$version"
              python -m coverage run --branch --append -m pytest -vvs -o log_cli=true tests/
            done
      - run:
          name: Make sure 100% code coverage
          command: python3 -m coverage report -m --fail-under=100
workflows:
  full-build:
    jobs:
      - build:
          matrix:
            parameters:
              # Test the minimum supported and latest Python versions:
              python-version:
                - "3.8"
                - "3.13"
